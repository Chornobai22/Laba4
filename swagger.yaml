openapi: 3.0.1
info:
  title: Лабораторна робота варіант 12
  description: >-
    Створити сервіс для збереження та редагування рейтингу студентів. Для
    зберігання даних про студента використовувати json. Також реалізувати
    можливість отримання списку кращих за рейтингом студентів.
  version: 1.0.0
externalDocs:
  description: GitHub repository
  url: https://github.com/Chornobai22/Laba4
tags:
  - name: rating
    description: operations with rating
  - name: student
    description: operations with students
  - name: user
    description: operations with user
  - name: auth
    description: login/logout operations
  
paths:
  /ratings:
   
    get:
      tags:
      - rating
      summary: Get all ratings
      description: getting of all ratings
      operationId: getRatings
      responses:
        200:
          description: "successful operation. all ratings are returned"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Rating'
        401:
          $ref: '#/components/responses/UnauthorizedError' 
          
    post:
      tags:
      - rating
      summary: Create new rating
      description: creating a new rating
      operationId: createRating
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        200:
          description: "successful operation. rating is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        401:
          $ref: '#/components/responses/UnauthorizedError'     
      security:
      - basicAuth: []
      
  /ratings/{ratingId}:
    put:
      tags:
      - rating
      summary: Update rating
      description: updating rating owned by current user
      operationId: updateRating
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'the rating id that needs to be updated'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'rating object updated'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        200:
          description:  "successful operation.rating is updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your rating.
        404:
          description: Rating is not found.
      security:
      - basicAuth: []       
          
    delete:
      tags:
      - rating
      summary: Delete rating
      description: deleting existing rating owned by current user
      operationId: deleteRating
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'rating id that needs to be updated'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation. rating is deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your rating
        404:
          description: rating was not found
      security:
      - basicAuth: []   
          
  /students/{ratingId}:
    get:
      tags:
      - student
      summary: Get all students
      description: Getting of all existong students
      operationId: getStudents
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'rating id.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation. all students are returned"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
      security:
      - basicAuth: []
      
          
          
    post:
      tags:
      - student
      summary: Create new student
      description: creating new student
      operationId: createStudent
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'rating id'
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        200:
          description: "successful operation. new student is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'     
      security:
      - basicAuth: []
  
  
  /beststudents/{ratingId}/{studentGrade}:
   get:
      tags:
      - student
      summary: Find students by their grade
      description: grade should be provided as double value
      operationId: findStudentsByGrade
      parameters:
      - name: grade
        in: query
        description: grade values that need to be considered for filter
        required: true
        schema:
          type: number
          format: double
          
      - name: ratingId
        in: path
        required: true
        description: 'bestrating id'
        schema:
          type: integer
          format: int64
          
      - name: studentGrade
        in: path
        required: true
        description: 'the id of student to get'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation.all the best students are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        405:
          description: Invalid input
          content: {}
      security:
      - basicAuth: []   
        
  /students/{ratingId}/{studentId}:

    get:
      tags:
      - student
      summary: Get student by id
      description: getting student by id
      operationId: getStudById
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'rating id'
        schema:
          type: integer
          format: int64
      - name: studentId
        in: path
        required: true
        description: 'the id of student to get'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation.student is retrieved"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
        404:
          description: a student with this id was not found
      security:
      - basicAuth: []
    put:
      tags:
      - student
      summary: Update student
      description: updating existing student 
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'rating id'
        schema:
          type: integer
          format: int64
      - name: studentId
        in: path
        required: true
        description: ' student id that needs to be updated'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'updated student object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        200:
          description:  "successful operation.student is updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to update not your student.
        404:
          description: User is not found.
      security:
      - basicAuth: []  
      
   
    
    delete:
      tags:
      - student
      summary: Delete student
      description: Deleting existing student owned by current user
      operationId: deleteStudent
      parameters:
      - name: ratingId
        in: path
        required: true
        description: 'student id'
        schema:
          type: integer
          format: int64
      - name: studentId
        in: path
        required: true
        description: 'student id needs to be updated'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation.student is deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your student
        404:
          description: Student was not found.
      security:
      - basicAuth: []  
          
  

      
      
  /auth/login:
    post:
      tags:
      - auth
      summary: Logs user in
      description: provides logging into system with given credentials
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: the user's password (plain text)
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation"
          
        401:
          $ref: '#/components/responses/InvalidCredentialsError'

  /auth/logout:
    post:
      tags:
      - auth
      summary: Logs  user out 
      operationId: logoutUser
      responses:
        200:
          description: "successful operation"
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - basicAuth: []
      
  /user:
    post:
      tags:
      - user
      summary: Register new user
      operationId: registerUser
      requestBody:
      
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "User with such username already exists"
          
    
  /user/{userId}:        
    put:
      tags:
      - user
      summary: Update your account
      description: Updating is only applicable to owner's account
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated user object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User is not found.
      security:
      - basicAuth: []
      
    delete:  
      tags:
      - user
      summary: Delete your account
      description: Deleting is only applicable to owner's account
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be deleted.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User is not found.
      security:
      - basicAuth: []
    get:
      
      tags:
      - user
      summary: Get user by id
      description: getting user by id
      operationId: getUserById
      parameters:
      
      - name: userId
        in: path
        required: true
        description: 'the id of user to get'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation.user is retrieved"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/UnauthorizedError'          
        404:
          description: a student with this id was not found
      security:
      - basicAuth: []
    
   

components:
  schemas:
    User:
      required:
        - id
        - username
        - password
        - name
        - surname
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
          
    Student:
      required:
        - id
        - firstname
        - lastname
        - course
        - grade
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        course:
          type: integer
        best_grade:
          type: number
          format: double
          
          
    Rating:
      required:
        - id
        - title
        - students
        - accessusers
        - visibleto
        
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        id_accessusers:
          type: array
          items:
           type: integer
            
        id_visibleTo:
          type: array
          items:
           type: integer
      
              
            
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    InvalidCredentialsError:
      description: Provided credentials are invalid